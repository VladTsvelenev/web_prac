buildscript {
  dependencies {
    classpath('net.serenity-bdd:serenity-gradle-plugin:4.2.8')
  }
}

plugins {
  id 'java'
  id 'io.qameta.allure' version '2.9.3'
}

apply plugin: "net.serenity-bdd.serenity-gradle-plugin"

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
  mavenCentral()
}

ext {
  allureVersion = '2.29.0'
  fluentleniumVersion = '5.0.4'
  junitVersion = '5.11.3'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

dependencies {
  testImplementation('com.codeborne:selenide:7.6.0')
  testImplementation("io.qameta.allure:allure-selenide:${allureVersion}")
  testImplementation('net.serenity-bdd:serenity-core:4.2.8')
  testImplementation('net.serenity-bdd:serenity-junit:4.2.8')
  testImplementation("org.fluentlenium:fluentlenium-core:${fluentleniumVersion}")
  testImplementation("org.fluentlenium:fluentlenium-assertj:${fluentleniumVersion}")
  testImplementation("org.fluentlenium:fluentlenium-junit-jupiter:${fluentleniumVersion}")
  testImplementation('com.epam.jdi:jdi-light-html:1.6.0')
  testImplementation('org.assertj:assertj-core:3.26.3')
  testImplementation('com.google.truth:truth:1.4.4')
  testImplementation('org.hamcrest:hamcrest:3.0')
  testImplementation('org.slf4j:slf4j-simple:2.0.16')

  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
  testRuntimeOnly("org.junit.vintage:junit-vintage-engine:${junitVersion}")
}

test {
useJUnitPlatform()}
allure {
  autoconfigure = true
  version = "${allureVersion}"

useJUnit5 {
    version = "${allureVersion}"
  }}